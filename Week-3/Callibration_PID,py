import cv2
import numpy as np
import json
import os
from picamera2 import Picamera2
import time

# Camera settings
FRAME_WIDTH = 640
FRAME_HEIGHT = 480

# ROI parameters
USE_ROI = True
ROI_HEIGHT = 150

# Minimum contour area for valid detection
MIN_CONTOUR_AREA = 800

# Default color ranges (starting points for calibration)
default_color_ranges = {
    'red': [
        ([0, 150, 150], [10, 255, 255]),     # Lower red range
        ([170, 150, 150], [180, 255, 255])   # Upper red range (wraps around)
    ],
    'blue': [
        ([100, 150, 60], [130, 255, 120])    # Blue range
    ],
    'green': [
        ([40, 150, 110], [75, 255, 200])     # Green range
    ],
    'yellow': [
        ([25, 150, 150], [35, 255, 255])     # Yellow range
    ],
    'black': [
        ([0, 0, 0], [180, 100, 75])          # Black range
    ]
}

# File to save calibrated values
CALIBRATION_FILE = "color_calibration.json"

def initialize_camera():
    """Initialize and return the camera object"""
    picam2 = Picamera2()
    config = picam2.create_preview_configuration(main={"size": (FRAME_WIDTH, FRAME_HEIGHT)})
    picam2.configure(config)
    picam2.start()
    time.sleep(2)  # Allow camera to warm up
    return picam2

def load_existing_calibration():
    """Load existing calibration if available"""
    if os.path.exists(CALIBRATION_FILE):
        try:
            with open(CALIBRATION_FILE, 'r') as f:
                return json.load(f)
        except json.JSONDecodeError:
            print("Error reading calibration file. Using default values.")
    return default_color_ranges

def save_calibration(color_ranges):
    """Save calibration to file"""
    with open(CALIBRATION_FILE, 'w') as f:
        json.dump(color_ranges, f, indent=4)
    print(f"Calibration saved to {CALIBRATION_FILE}")

def display_instructions(frame, color_name):
    """Display instructions on the frame"""
    cv2.putText(frame, f"Calibrating {color_name} line", (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
    cv2.putText(frame, "Position camera to see the line", (10, 60),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
    cv2.putText(frame, "Press 'c' to calibrate", (10, 90),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
    cv2.putText(frame, "Press 's' to skip this color", (10, 120),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
    cv2.putText(frame, "Press 'q' to quit", (10, 150),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

def create_trackbars(color_name, color_range):
    """Create trackbars for manual HSV adjustment"""
    window_name = f"{color_name} Calibration"
    cv2.namedWindow(window_name)
    
    # For simplicity, we'll use the first range for most colors
    # Red is special with two ranges, so we handle that separately
    if color_name == 'red':
        # Lower red range
        cv2.createTrackbar('H_min_low', window_name, color_range[0][0][0], 179, lambda x: None)
        cv2.createTrackbar('S_min_low', window_name, color_range[0][0][1], 255, lambda x: None)
        cv2.createTrackbar('V_min_low', window_name, color_range[0][0][2], 255, lambda x: None)
        cv2.createTrackbar('H_max_low', window_name, color_range[0][1][0], 179, lambda x: None)
        cv2.createTrackbar('S_max_low', window_name, color_range[0][1][1], 255, lambda x: None)
        cv2.createTrackbar('V_max_low', window_name, color_range[0][1][2], 255, lambda x: None)
        
        # Upper red range
        cv2.createTrackbar('H_min_high', window_name, color_range[1][0][0], 179, lambda x: None)
        cv2.createTrackbar('S_min_high', window_name, color_range[1][0][1], 255, lambda x: None)
        cv2.createTrackbar('V_min_high', window_name, color_range[1][0][2], 255, lambda x: None)
        cv2.createTrackbar('H_max_high', window_name, color_range[1][1][0], 179, lambda x: None)
        cv2.createTrackbar('S_max_high', window_name, color_range[1][1][1], 255, lambda x: None)
        cv2.createTrackbar('V_max_high', window_name, color_range[1][1][2], 255, lambda x: None)
    else:
        # Other colors with single range
        cv2.createTrackbar('H_min', window_name, color_range[0][0][0], 179, lambda x: None)
        cv2.createTrackbar('S_min', window_name, color_range[0][0][1], 255, lambda x: None)
        cv2.createTrackbar('V_min', window_name, color_range[0][0][2], 255, lambda x: None)
        cv2.createTrackbar('H_max', window_name, color_range[0][1][0], 179, lambda x: None)
        cv2.createTrackbar('S_max', window_name, color_range[0][1][1], 255, lambda x: None)
        cv2.createTrackbar('V_max', window_name, color_range[0][1][2], 255, lambda x: None)
    
    return window_name

def get_trackbar_values(window_name, color_name):
    """Get current values from trackbars"""
    if color_name == 'red':
        # Get values for both red ranges
        h_min_low = cv2.getTrackbarPos('H_min_low', window_name)
        s_min_low = cv2.getTrackbarPos('S_min_low', window_name)
        v_min_low = cv2.getTrackbarPos('V_min_low', window_name)
        h_max_low = cv2.getTrackbarPos('H_max_low', window_name)
        s_max_low = cv2.getTrackbarPos('S_max_low', window_name)
        v_max_low = cv2.getTrackbarPos('V_max_low', window_name)
        
        h_min_high = cv2.getTrackbarPos('H_min_high', window_name)
        s_min_high = cv2.getTrackbarPos('S_min_high', window_name)
        v_min_high = cv2.getTrackbarPos('V_min_high', window_name)
        h_max_high = cv2.getTrackbarPos('H_max_high', window_name)
        s_max_high = cv2.getTrackbarPos('S_max_high', window_name)
        v_max_high = cv2.getTrackbarPos('V_max_high', window_name)
        
        return [
            ([h_min_low, s_min_low, v_min_low], [h_max_low, s_max_low, v_max_low]),
            ([h_min_high, s_min_high, v_min_high], [h_max_high, s_max_high, v_max_high])
        ]
    else:
        # Get values for single range colors
        h_min = cv2.getTrackbarPos('H_min', window_name)
        s_min = cv2.getTrackbarPos('S_min', window_name)
        v_min = cv2.getTrackbarPos('V_min', window_name)
        h_max = cv2.getTrackbarPos('H_max', window_name)
        s_max = cv2.getTrackbarPos('S_max', window_name)
        v_max = cv2.getTrackbarPos('V_max', window_name)
        
        return [([h_min, s_min, v_min], [h_max, s_max, v_max])]

def auto_calibrate_color(frame, color_name):
    """Automatically calibrate color based on the largest contour in the frame"""
    # Create a mask with very broad HSV thresholds to detect potential lines
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    
    # Define initial broad ranges based on color
    if color_name == 'red':
        # Red is tricky because it wraps around the H value
        mask1 = cv2.inRange(hsv, np.array([0, 120, 100]), np.array([15, 255, 255]))
        mask2 = cv2.inRange(hsv, np.array([165, 120, 100]), np.array([180, 255, 255]))
        mask = cv2.bitwise_or(mask1, mask2)
    elif color_name == 'blue':
        mask = cv2.inRange(hsv, np.array([90, 100, 50]), np.array([140, 255, 255]))
    elif color_name == 'green':
        mask = cv2.inRange(hsv, np.array([35, 100, 50]), np.array([85, 255, 255]))
    elif color_name == 'yellow':
        mask = cv2.inRange(hsv, np.array([20, 100, 100]), np.array([40, 255, 255]))
    elif color_name == 'black':
        mask = cv2.inRange(hsv, np.array([0, 0, 0]), np.array([180, 100, 70]))
    else:
        return None
    
    # Apply morphological operations to clean up the mask
    kernel = np.ones((5, 5), np.uint8)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
    
    # Find contours
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Filter by area and find the largest contour
    valid_contours = [cnt for cnt in contours if cv2.contourArea(cnt) > MIN_CONTOUR_AREA]
    
    if not valid_contours:
        print(f"No significant {color_name} contours found for automatic calibration")
        return None
    
    # Get the largest contour
    largest_contour = max(valid_contours, key=cv2.contourArea)
    
    # Create a mask for the largest contour
    contour_mask = np.zeros_like(mask)
    cv2.drawContours(contour_mask, [largest_contour], -1, 255, -1)
    
    # Get HSV values for pixels inside the contour
    contour_pixels = hsv[contour_mask == 255]
    if len(contour_pixels) == 0:
        return None
    
    # Calculate min and max HSV values (with margins)
    h_values = contour_pixels[:, 0]
    s_values = contour_pixels[:, 1]
    v_values = contour_pixels[:, 2]
    
    # Special handling for red (wraps around H=0/180)
    if color_name == 'red':
        # Check if we need to handle hue wraparound
        if np.max(h_values) - np.min(h_values) > 90:
            # Split into two ranges
            lower_h = h_values[h_values <= 15]
            upper_h = h_values[h_values >= 165]
            
            if len(lower_h) > 0:
                h_min_low = max(0, np.min(lower_h) - 5)
                h_max_low = min(179, np.max(lower_h) + 5)
            else:
                h_min_low, h_max_low = 0, 10
                
            if len(upper_h) > 0:
                h_min_high = max(0, np.min(upper_h) - 5)
                h_max_high = min(179, np.max(upper_h) + 5)
            else:
                h_min_high, h_max_high = 170, 180
            
            # Get S and V values from all points
            s_min = max(0, np.min(s_values) - 20)
            s_max = min(255, np.max(s_values) + 20)
            v_min = max(0, np.min(v_values) - 20)
            v_max = min(255, np.max(v_values) + 20)
            
            return [
                ([h_min_low, s_min, v_min], [h_max_low, s_max, v_max]),
                ([h_min_high, s_min, v_min], [h_max_high, s_max, v_max])
            ]
        else:
            # Handle as a normal color with margins
            h_min = max(0, np.min(h_values) - 5)
            h_max = min(179, np.max(h_values) + 5)
            s_min = max(0, np.min(s_values) - 20)
            s_max = min(255, np.max(s_values) + 20)
            v_min = max(0, np.min(v_values) - 20)
            v_max = min(255, np.max(v_values) + 20)
            
            return [([h_min, s_min, v_min], [h_max, s_max, v_max])]
    
    # For all other colors, add margins to the min/max values
    h_min = max(0, np.min(h_values) - 5)
    h_max = min(179, np.max(h_values) + 5)
    s_min = max(0, np.min(s_values) - 20)
    s_max = min(255, np.max(s_values) + 20)
    v_min = max(0, np.min(v_values) - 20)
    v_max = min(255, np.max(v_values) + 20)
    
    # Special adjustments for black (tighter ranges)
    if color_name == 'black':
        v_max = min(100, v_max)  # Ensure value stays low for black
    
    return [([h_min, s_min, v_min], [h_max, s_max, v_max])]

def calibrate_color(picam2, color_name, current_range):
    """Calibrate a specific color"""
    window_name = create_trackbars(color_name, current_range)
    
    manual_mode = False
    auto_calibrated = False
    
    # Always capture the current values to ensure we have something to return
    # if the user exits abruptly
    latest_values = current_range
    
    try:
        while True:
            frame = picam2.capture_array()
            
            # Apply ROI if enabled
            if USE_ROI:
                roi_y_start = FRAME_HEIGHT - ROI_HEIGHT
                cv2.rectangle(frame, (0, roi_y_start), (FRAME_WIDTH, FRAME_HEIGHT), (255, 255, 0), 2)
                roi = frame[roi_y_start:FRAME_HEIGHT, 0:FRAME_WIDTH]
            else:
                roi = frame
                
            hsv = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)
            
            # Display instruction text
            display_instructions(frame, color_name)
            
            # If in manual mode, get values from trackbars
            if manual_mode:
                color_range = get_trackbar_values(window_name, color_name)
                # Always update latest_values when in manual mode
                latest_values = color_range
            else:
                color_range = current_range
                
            # Create mask with current values
            color_mask = np.zeros(hsv.shape[:2], dtype=np.uint8)
            
            for lower, upper in color_range:
                lower_np = np.array(lower, dtype=np.uint8)
                upper_np = np.array(upper, dtype=np.uint8)
                partial_mask = cv2.inRange(hsv, lower_np, upper_np)
                color_mask = cv2.bitwise_or(color_mask, partial_mask)
                
            # Apply morphological operations
            kernel = np.ones((5, 5), np.uint8)
            color_mask = cv2.morphologyEx(color_mask, cv2.MORPH_CLOSE, kernel)
            
            # Find contours
            contours, _ = cv2.findContours(color_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            valid_contours = [cnt for cnt in contours if cv2.contourArea(cnt) > MIN_CONTOUR_AREA]
            
            # Display the mask
            mask_display = cv2.cvtColor(color_mask, cv2.COLOR_GRAY2BGR)
            cv2.imshow(f"{color_name} Mask", mask_display)
            
            # Draw the valid contours
            contour_frame = roi.copy()
            cv2.drawContours(contour_frame, valid_contours, -1, (0, 255, 0), 2)
            cv2.imshow(f"{color_name} Contours", contour_frame)
            
            # Show the main frame
            cv2.imshow("Calibration", frame)
            
            key = cv2.waitKey(1) & 0xFF
            
            if key == ord('q'):
                # Quit calibration but still return the latest values
                print(f"Exiting calibration for {color_name}. Recording current values.")
                break
            elif key == ord('c'):
                if not auto_calibrated:
                    # Try auto-calibration first
                    auto_result = auto_calibrate_color(roi, color_name)
                    if auto_result:
                        current_range = auto_result
                        latest_values = auto_result  # Update latest values
                        auto_calibrated = True
                        print(f"Auto-calibrated {color_name}: {current_range}")
                        
                        # Update trackbars with auto values
                        cv2.destroyWindow(window_name)
                        window_name = create_trackbars(color_name, current_range)
                        manual_mode = True
                    else:
                        print(f"Auto-calibration failed for {color_name}. Switching to manual mode.")
                        manual_mode = True
                else:
                    # Save manual calibration
                    if manual_mode:
                        current_range = get_trackbar_values(window_name, color_name)
                        latest_values = current_range  # Update latest values
                        print(f"Manual calibration for {color_name}: {current_range}")
                    return latest_values
            elif key == ord('m'):
                # Switch to manual mode
                manual_mode = True
                if not auto_calibrated:
                    print(f"Switching to manual calibration for {color_name}")
            elif key == ord('s'):
                # Skip this color
                print(f"Skipping calibration for {color_name}")
                return current_range
                
    except Exception as e:
        print(f"Error during calibration of {color_name}: {e}")
        print(f"Saving current values for {color_name}")
    finally:
        # Clean up
        try:
            cv2.destroyWindow(window_name)
            cv2.destroyWindow(f"{color_name} Mask")
            cv2.destroyWindow(f"{color_name} Contours")
        except:
            pass
        
    # Always return the latest values, even if there was an exception
    return latest_values

def main():
    # Initialize camera
    print("Initializing camera...")
    picam2 = initialize_camera()
    
    # Load existing calibration or default values
    print("Loading calibration values...")
    color_ranges = load_existing_calibration()
    
    # Colors to calibrate (order matters)
    # Removed 'cyan' from the list to match main file
    colors_to_calibrate = ['red', 'green', 'blue', 'yellow', 'black']
    
    print("\nColor Calibration Tool for Line Following Robot")
    print("===============================================")
    print("This tool will help you calibrate HSV color ranges for line detection.")
    print("For each color:")
    print("1. Position your camera to see the line of the specified color")
    print("2. Press 'c' to auto-calibrate, then fine-tune the values if needed")
    print("3. Press 'c' again to save and move to the next color")
    print("4. Press 's' to skip a color without changing its values")
    print("5. Press 'q' to quit the calibration process")
    print("\nCalibration will start in 3 seconds...")
    time.sleep(3)
    
    try:
        # Create a copy for incremental updates
        updated_ranges = color_ranges.copy()
        
        for color in colors_to_calibrate:
            print(f"\nCalibrating {color}...")
            current_range = color_ranges.get(color, default_color_ranges[color])
            calibrated_range = calibrate_color(picam2, color, current_range)
            
            # Update immediately after each color is calibrated
            updated_ranges[color] = calibrated_range
            save_calibration(updated_ranges)
            print(f"Updated calibration for {color} saved.")
        
        print("\nCalibration complete!")
        
    except KeyboardInterrupt:
        print("\nCalibration interrupted.")
        # Final save with whatever we have
        save_calibration(updated_ranges)
        print("Partial calibration saved.")
    finally:
        cv2.destroyAllWindows()
        picam2.stop()
        print("Exiting calibration tool.")

if __name__ == "__main__":
    main()